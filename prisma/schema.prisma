// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  email             String              @unique
  password          String?
  isEmailVerified   Boolean             @default(false)
  profilePictureUrl String?
  role              UserRole            @default(USER)
  session           Session[]
  verificationToken VerificationToken[]
  userPreferences   UserPreferences?
  accounts          Account[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum Provider {
  GOOGLE
  FACEBOOK
  EMAIL
}

enum AccountType {
  OAUTH
  EMAIL
}

model Account {
  id                String      @id @default(uuid())
  userId            String
  provider          Provider
  providerAccountId String
  type              AccountType
  accessToken       String?
  refreshToken      String?
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model UserPreferences {
  id                 String  @id @default(uuid())
  isTwoFactorEnabled Boolean @default(false)
  twoFactorSecret    String?
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model VerificationToken {
  id        String           @id @default(uuid())
  userId    String
  token     String           @unique
  type      VerificationType
  createdAt DateTime         @default(now())
  expiresAt DateTime
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginAttempt {
  id            String    @id @default(uuid())
  ipAddress     String
  userAgent     String?
  attempts      Int       @default(1)
  lastAttemptAt DateTime  @default(now())
  blockedUntil  DateTime?

  @@index([ipAddress])
}
